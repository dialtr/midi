

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Jan 15 12:03:07 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=2
    11                           	psect	text4,global,reloc=2,class=CODE,delta=1
    12                           	psect	text5,global,reloc=2,class=CODE,delta=1
    13                           	psect	text6,global,reloc=2,class=CODE,delta=1
    14                           	psect	text7,global,reloc=2,class=CODE,delta=1
    15                           	psect	text8,global,reloc=2,class=CODE,delta=1
    16                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    17                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    18  0000                     
    19                           ; Version 1.45
    20                           ; Generated 16/11/2017 GMT
    21                           ; 
    22                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC18F4620 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     _PORTDbits	set	3971
    54  0000                     _PORTD	set	3971
    55  0000                     _TRISD	set	3989
    56  0000                     _RCREG	set	4014
    57  0000                     _SPBRG	set	4015
    58  0000                     _RCIF	set	31989
    59  0000                     _TXEN	set	32101
    60  0000                     _CREN	set	32092
    61  0000                     _TRISC6	set	31910
    62  0000                     _TRISC7	set	31911
    63  0000                     _SPEN	set	32095
    64  0000                     _SYNC	set	32100
    65  0000                     _BRGH	set	32098
    66                           
    67                           ; #config settings
    68  0000                     
    69                           	psect	cinit
    70  00FD60                     __pcinit:
    71                           	opt stack 0
    72  00FD60                     start_initialization:
    73                           	opt stack 0
    74  00FD60                     __initialization:
    75                           	opt stack 0
    76  00FD60                     end_of_initialization:
    77                           	opt stack 0
    78  00FD60                     __end_of__initialization:
    79                           	opt stack 0
    80  00FD60  0100               	movlb	0
    81  00FD62  EFEC  F07E         	goto	_main	;jump to C main() function
    82                           
    83                           	psect	cstackCOMRAM
    84  000001                     __pcstackCOMRAM:
    85                           	opt stack 0
    86  000001                     ??_blink:
    87  000001                     ?___aldiv:
    88                           	opt stack 0
    89  000001                     ___aldiv@dividend:
    90                           	opt stack 0
    91                           
    92                           ; 4 bytes @ 0x0
    93  000001                     	ds	1
    94  000002                     loop@b:
    95                           	opt stack 0
    96                           
    97                           ; 1 bytes @ 0x1
    98  000002                     	ds	3
    99  000005                     ___aldiv@divisor:
   100                           	opt stack 0
   101                           
   102                           ; 4 bytes @ 0x4
   103  000005                     	ds	4
   104  000009                     ___aldiv@counter:
   105                           	opt stack 0
   106                           
   107                           ; 1 bytes @ 0x8
   108  000009                     	ds	1
   109  00000A                     ___aldiv@sign:
   110                           	opt stack 0
   111                           
   112                           ; 1 bytes @ 0x9
   113  00000A                     	ds	1
   114  00000B                     ___aldiv@quotient:
   115                           	opt stack 0
   116                           
   117                           ; 4 bytes @ 0xA
   118  00000B                     	ds	4
   119  00000F                     uart_init@baudrate:
   120                           	opt stack 0
   121                           
   122                           ; 4 bytes @ 0xE
   123  00000F                     	ds	4
   124  000013                     ??_uart_init:
   125                           
   126                           ; 1 bytes @ 0x12
   127  000013                     	ds	8
   128  00001B                     uart_init@x:
   129                           	opt stack 0
   130                           
   131                           ; 2 bytes @ 0x1A
   132  00001B                     	ds	2
   133  00001D                     system_init@baudrate:
   134                           	opt stack 0
   135                           
   136                           ; 4 bytes @ 0x1C
   137  00001D                     	ds	4
   138  000021                     system_init@status:
   139                           	opt stack 0
   140                           
   141                           ; 1 bytes @ 0x20
   142  000021                     	ds	1
   143  000022                     main@MIDI_BAUD_RATE:
   144                           	opt stack 0
   145                           
   146                           ; 4 bytes @ 0x21
   147  000022                     	ds	4
   148                           
   149 ;;
   150 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   151 ;;
   152 ;; *************** function _main *****************
   153 ;; Defined at:
   154 ;;		line 227 in file "main.c"
   155 ;; Parameters:    Size  Location     Type
   156 ;;		None
   157 ;; Auto vars:     Size  Location     Type
   158 ;;  MIDI_BAUD_RA    4   33[COMRAM] const long 
   159 ;; Return value:  Size  Location     Type
   160 ;;                  1    wreg      void 
   161 ;; Registers used:
   162 ;;		wreg, status,2, status,0, cstack
   163 ;; Tracked objects:
   164 ;;		On entry : 0/0
   165 ;;		On exit  : 0/0
   166 ;;		Unchanged: 0/0
   167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   169 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   171 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   172 ;;Total ram usage:        4 bytes
   173 ;; Hardware stack levels required when called:    3
   174 ;; This function calls:
   175 ;;		_loop
   176 ;;		_system_init
   177 ;; This function is called by:
   178 ;;		Startup code after reset
   179 ;; This function uses a non-reentrant model
   180 ;;
   181                           
   182                           	psect	text0
   183  00FDD8                     __ptext0:
   184                           	opt stack 0
   185  00FDD8                     _main:
   186                           	opt stack 28
   187                           
   188                           ;main.c: 228: const long MIDI_BAUD_RATE = 31250;
   189                           
   190                           ;incstack = 0
   191  00FDD8  0E12               	movlw	18
   192  00FDDA  6E22               	movwf	main@MIDI_BAUD_RATE,c
   193  00FDDC  0E7A               	movlw	122
   194  00FDDE  6E23               	movwf	main@MIDI_BAUD_RATE+1,c
   195  00FDE0  0E00               	movlw	0
   196  00FDE2  6E24               	movwf	main@MIDI_BAUD_RATE+2,c
   197  00FDE4  0E00               	movlw	0
   198  00FDE6  6E25               	movwf	main@MIDI_BAUD_RATE+3,c
   199                           
   200                           ;main.c: 230: system_init(MIDI_BAUD_RATE);
   201  00FDE8  C022  F01D         	movff	main@MIDI_BAUD_RATE,system_init@baudrate
   202  00FDEC  C023  F01E         	movff	main@MIDI_BAUD_RATE+1,system_init@baudrate+1
   203  00FDF0  C024  F01F         	movff	main@MIDI_BAUD_RATE+2,system_init@baudrate+2
   204  00FDF4  C025  F020         	movff	main@MIDI_BAUD_RATE+3,system_init@baudrate+3
   205  00FDF8  ECD8  F07E         	call	_system_init	;wreg free
   206  00FDFC                     
   207                           ;main.c: 233: loop();
   208  00FDFC  ECCB  F07E         	call	_loop	;wreg free
   209                           
   210                           ;main.c: 234: }
   211  00FE00  D7FD               	goto	l70
   212  00FE02                     __end_of_main:
   213                           	opt stack 0
   214                           
   215 ;; *************** function _system_init *****************
   216 ;; Defined at:
   217 ;;		line 170 in file "main.c"
   218 ;; Parameters:    Size  Location     Type
   219 ;;  baudrate        4   28[COMRAM] long 
   220 ;; Auto vars:     Size  Location     Type
   221 ;;  status          1   32[COMRAM] unsigned char 
   222 ;; Return value:  Size  Location     Type
   223 ;;                  1    wreg      unsigned char 
   224 ;; Registers used:
   225 ;;		wreg, status,2, status,0, cstack
   226 ;; Tracked objects:
   227 ;;		On entry : 0/0
   228 ;;		On exit  : 0/0
   229 ;;		Unchanged: 0/0
   230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   231 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   232 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   234 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   235 ;;Total ram usage:        5 bytes
   236 ;; Hardware stack levels used:    1
   237 ;; Hardware stack levels required when called:    2
   238 ;; This function calls:
   239 ;;		_port_init
   240 ;;		_uart_init
   241 ;; This function is called by:
   242 ;;		_main
   243 ;; This function uses a non-reentrant model
   244 ;;
   245                           
   246                           	psect	text1
   247  00FDB0                     __ptext1:
   248                           	opt stack 0
   249  00FDB0                     _system_init:
   250                           	opt stack 28
   251                           
   252                           ;main.c: 171: char status = 0;
   253                           
   254                           ;incstack = 0
   255  00FDB0  0E00               	movlw	0
   256  00FDB2  6E21               	movwf	system_init@status,c
   257                           
   258                           ;main.c: 173: status = port_init();
   259  00FDB4  ECBB  F07E         	call	_port_init	;wreg free
   260  00FDB8  6E21               	movwf	system_init@status,c
   261                           
   262                           ;main.c: 174: if (!status) {
   263  00FDBA  5021               	movf	system_init@status,w,c
   264  00FDBC  B4D8               	btfsc	status,2,c
   265  00FDBE  0012               	return	
   266                           
   267                           ;main.c: 176: }
   268                           ;main.c: 178: status = uart_init(baudrate);
   269                           
   270                           ;main.c: 175: return status;
   271                           ;	Return value of _system_init is never used
   272  00FDC0  C01D  F00F         	movff	system_init@baudrate,uart_init@baudrate
   273  00FDC4  C01E  F010         	movff	system_init@baudrate+1,uart_init@baudrate+1
   274  00FDC8  C01F  F011         	movff	system_init@baudrate+2,uart_init@baudrate+2
   275  00FDCC  C020  F012         	movff	system_init@baudrate+3,uart_init@baudrate+3
   276  00FDD0  EC67  F07F         	call	_uart_init	;wreg free
   277  00FDD4  6E21               	movwf	system_init@status,c
   278                           
   279                           ;main.c: 180: return status;
   280                           ;	Return value of _system_init is never used
   281  00FDD6  0012               	return	
   282  00FDD8                     __end_of_system_init:
   283                           	opt stack 0
   284                           status	equ	0xFD8
   285                           
   286 ;; *************** function _uart_init *****************
   287 ;; Defined at:
   288 ;;		line 78 in file "main.c"
   289 ;; Parameters:    Size  Location     Type
   290 ;;  baudrate        4   14[COMRAM] long 
   291 ;; Auto vars:     Size  Location     Type
   292 ;;  x               2   26[COMRAM] unsigned int 
   293 ;; Return value:  Size  Location     Type
   294 ;;                  1    wreg      unsigned char 
   295 ;; Registers used:
   296 ;;		wreg, status,2, status,0, cstack
   297 ;; Tracked objects:
   298 ;;		On entry : 0/0
   299 ;;		On exit  : 0/0
   300 ;;		Unchanged: 0/0
   301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   302 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   303 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   304 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   305 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   306 ;;Total ram usage:       14 bytes
   307 ;; Hardware stack levels used:    1
   308 ;; Hardware stack levels required when called:    1
   309 ;; This function calls:
   310 ;;		___aldiv
   311 ;; This function is called by:
   312 ;;		_system_init
   313 ;; This function uses a non-reentrant model
   314 ;;
   315                           
   316                           	psect	text2
   317  00FECE                     __ptext2:
   318                           	opt stack 0
   319  00FECE                     _uart_init:
   320                           	opt stack 28
   321                           
   322                           ;main.c: 79: unsigned int x;
   323                           ;main.c: 80: x = (8000000 - (baudrate * 64)) / (baudrate * 64);
   324                           
   325                           ;incstack = 0
   326  00FECE  C00F  F013         	movff	uart_init@baudrate,??_uart_init
   327  00FED2  C010  F014         	movff	uart_init@baudrate+1,??_uart_init+1
   328  00FED6  C011  F015         	movff	uart_init@baudrate+2,??_uart_init+2
   329  00FEDA  C012  F016         	movff	uart_init@baudrate+3,??_uart_init+3
   330  00FEDE  0E06               	movlw	6
   331  00FEE0                     u225:
   332  00FEE0  90D8               	bcf	status,0,c
   333  00FEE2  3613               	rlcf	??_uart_init,f,c
   334  00FEE4  3614               	rlcf	??_uart_init+1,f,c
   335  00FEE6  3615               	rlcf	??_uart_init+2,f,c
   336  00FEE8  3616               	rlcf	??_uart_init+3,f,c
   337  00FEEA  2EE8               	decfsz	wreg,f,c
   338  00FEEC  D7F9               	goto	u225
   339  00FEEE  1E13               	comf	??_uart_init,f,c
   340  00FEF0  1E14               	comf	??_uart_init+1,f,c
   341  00FEF2  1E15               	comf	??_uart_init+2,f,c
   342  00FEF4  1E16               	comf	??_uart_init+3,f,c
   343  00FEF6  2A13               	incf	??_uart_init,f,c
   344  00FEF8  0E00               	movlw	0
   345  00FEFA  2214               	addwfc	??_uart_init+1,f,c
   346  00FEFC  2215               	addwfc	??_uart_init+2,f,c
   347  00FEFE  2216               	addwfc	??_uart_init+3,f,c
   348  00FF00  0E00               	movlw	0
   349  00FF02  2413               	addwf	??_uart_init,w,c
   350  00FF04  6E01               	movwf	___aldiv@dividend,c
   351  00FF06  0E12               	movlw	18
   352  00FF08  2014               	addwfc	??_uart_init+1,w,c
   353  00FF0A  6E02               	movwf	___aldiv@dividend+1,c
   354  00FF0C  0E7A               	movlw	122
   355  00FF0E  2015               	addwfc	??_uart_init+2,w,c
   356  00FF10  6E03               	movwf	___aldiv@dividend+2,c
   357  00FF12  0E00               	movlw	0
   358  00FF14  2016               	addwfc	??_uart_init+3,w,c
   359  00FF16  6E04               	movwf	___aldiv@dividend+3,c
   360  00FF18  C00F  F017         	movff	uart_init@baudrate,??_uart_init+4
   361  00FF1C  C010  F018         	movff	uart_init@baudrate+1,??_uart_init+5
   362  00FF20  C011  F019         	movff	uart_init@baudrate+2,??_uart_init+6
   363  00FF24  C012  F01A         	movff	uart_init@baudrate+3,??_uart_init+7
   364  00FF28  0E06               	movlw	6
   365  00FF2A                     u235:
   366  00FF2A  90D8               	bcf	status,0,c
   367  00FF2C  3617               	rlcf	??_uart_init+4,f,c
   368  00FF2E  3618               	rlcf	??_uart_init+5,f,c
   369  00FF30  3619               	rlcf	??_uart_init+6,f,c
   370  00FF32  361A               	rlcf	??_uart_init+7,f,c
   371  00FF34  2EE8               	decfsz	wreg,f,c
   372  00FF36  D7F9               	goto	u235
   373  00FF38  C017  F005         	movff	??_uart_init+4,___aldiv@divisor
   374  00FF3C  C018  F006         	movff	??_uart_init+5,___aldiv@divisor+1
   375  00FF40  C019  F007         	movff	??_uart_init+6,___aldiv@divisor+2
   376  00FF44  C01A  F008         	movff	??_uart_init+7,___aldiv@divisor+3
   377  00FF48  EC01  F07F         	call	___aldiv	;wreg free
   378  00FF4C  C001  F01B         	movff	?___aldiv,uart_init@x
   379  00FF50  C002  F01C         	movff	?___aldiv+1,uart_init@x+1
   380                           
   381                           ;main.c: 81: if (x > 255) {
   382  00FF54  041C               	decf	uart_init@x+1,w,c
   383  00FF56  A0D8               	btfss	status,0,c
   384  00FF58  D044               	goto	l31
   385                           
   386                           ;main.c: 82: x = (8000000 - (baudrate * 16)) / (baudrate * 16);
   387  00FF5A  C00F  F013         	movff	uart_init@baudrate,??_uart_init
   388  00FF5E  C010  F014         	movff	uart_init@baudrate+1,??_uart_init+1
   389  00FF62  C011  F015         	movff	uart_init@baudrate+2,??_uart_init+2
   390  00FF66  C012  F016         	movff	uart_init@baudrate+3,??_uart_init+3
   391  00FF6A  0E04               	movlw	4
   392  00FF6C                     u255:
   393  00FF6C  90D8               	bcf	status,0,c
   394  00FF6E  3613               	rlcf	??_uart_init,f,c
   395  00FF70  3614               	rlcf	??_uart_init+1,f,c
   396  00FF72  3615               	rlcf	??_uart_init+2,f,c
   397  00FF74  3616               	rlcf	??_uart_init+3,f,c
   398  00FF76  2EE8               	decfsz	wreg,f,c
   399  00FF78  D7F9               	goto	u255
   400  00FF7A  1E13               	comf	??_uart_init,f,c
   401  00FF7C  1E14               	comf	??_uart_init+1,f,c
   402  00FF7E  1E15               	comf	??_uart_init+2,f,c
   403  00FF80  1E16               	comf	??_uart_init+3,f,c
   404  00FF82  2A13               	incf	??_uart_init,f,c
   405  00FF84  0E00               	movlw	0
   406  00FF86  2214               	addwfc	??_uart_init+1,f,c
   407  00FF88  2215               	addwfc	??_uart_init+2,f,c
   408  00FF8A  2216               	addwfc	??_uart_init+3,f,c
   409  00FF8C  0E00               	movlw	0
   410  00FF8E  2413               	addwf	??_uart_init,w,c
   411  00FF90  6E01               	movwf	___aldiv@dividend,c
   412  00FF92  0E12               	movlw	18
   413  00FF94  2014               	addwfc	??_uart_init+1,w,c
   414  00FF96  6E02               	movwf	___aldiv@dividend+1,c
   415  00FF98  0E7A               	movlw	122
   416  00FF9A  2015               	addwfc	??_uart_init+2,w,c
   417  00FF9C  6E03               	movwf	___aldiv@dividend+2,c
   418  00FF9E  0E00               	movlw	0
   419  00FFA0  2016               	addwfc	??_uart_init+3,w,c
   420  00FFA2  6E04               	movwf	___aldiv@dividend+3,c
   421  00FFA4  C00F  F017         	movff	uart_init@baudrate,??_uart_init+4
   422  00FFA8  C010  F018         	movff	uart_init@baudrate+1,??_uart_init+5
   423  00FFAC  C011  F019         	movff	uart_init@baudrate+2,??_uart_init+6
   424  00FFB0  C012  F01A         	movff	uart_init@baudrate+3,??_uart_init+7
   425  00FFB4  0E04               	movlw	4
   426  00FFB6                     u265:
   427  00FFB6  90D8               	bcf	status,0,c
   428  00FFB8  3617               	rlcf	??_uart_init+4,f,c
   429  00FFBA  3618               	rlcf	??_uart_init+5,f,c
   430  00FFBC  3619               	rlcf	??_uart_init+6,f,c
   431  00FFBE  361A               	rlcf	??_uart_init+7,f,c
   432  00FFC0  2EE8               	decfsz	wreg,f,c
   433  00FFC2  D7F9               	goto	u265
   434  00FFC4  C017  F005         	movff	??_uart_init+4,___aldiv@divisor
   435  00FFC8  C018  F006         	movff	??_uart_init+5,___aldiv@divisor+1
   436  00FFCC  C019  F007         	movff	??_uart_init+6,___aldiv@divisor+2
   437  00FFD0  C01A  F008         	movff	??_uart_init+7,___aldiv@divisor+3
   438  00FFD4  EC01  F07F         	call	___aldiv	;wreg free
   439  00FFD8  C001  F01B         	movff	?___aldiv,uart_init@x
   440  00FFDC  C002  F01C         	movff	?___aldiv+1,uart_init@x+1
   441                           
   442                           ;main.c: 83: BRGH = 1;
   443  00FFE0  84AC               	bsf	4012,2,c	;volatile
   444  00FFE2                     l31:
   445                           
   446                           ;main.c: 84: }
   447                           ;main.c: 86: if (x < 256) {
   448  00FFE2  041C               	decf	uart_init@x+1,w,c
   449  00FFE4  B0D8               	btfsc	status,0,c
   450  00FFE6  D00A               	goto	l32
   451                           
   452                           ;main.c: 87: SPBRG = x;
   453  00FFE8  C01B  FFAF         	movff	uart_init@x,4015	;volatile
   454                           
   455                           ;main.c: 88: SYNC = 0;
   456  00FFEC  98AC               	bcf	4012,4,c	;volatile
   457                           
   458                           ;main.c: 89: SPEN = 1;
   459  00FFEE  8EAB               	bsf	4011,7,c	;volatile
   460                           
   461                           ;main.c: 90: TRISC7 = 1;
   462  00FFF0  8E94               	bsf	3988,7,c	;volatile
   463                           
   464                           ;main.c: 91: TRISC6 = 1;
   465  00FFF2  8C94               	bsf	3988,6,c	;volatile
   466                           
   467                           ;main.c: 92: CREN = 1;
   468  00FFF4  88AB               	bsf	4011,4,c	;volatile
   469                           
   470                           ;main.c: 93: TXEN = 1;
   471  00FFF6  8AAC               	bsf	4012,5,c	;volatile
   472                           
   473                           ;main.c: 94: return 1;
   474  00FFF8  0E01               	movlw	1
   475  00FFFA  0012               	return	
   476  00FFFC                     l32:
   477                           
   478                           ;main.c: 95: }
   479                           ;main.c: 96: return 0;
   480  00FFFC  0E00               	movlw	0
   481  00FFFE  0012               	return	
   482  010000                     __end_of_uart_init:
   483                           	opt stack 0
   484                           wreg	equ	0xFE8
   485                           status	equ	0xFD8
   486                           
   487 ;; *************** function ___aldiv *****************
   488 ;; Defined at:
   489 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/aldiv.c"
   490 ;; Parameters:    Size  Location     Type
   491 ;;  dividend        4    0[COMRAM] long 
   492 ;;  divisor         4    4[COMRAM] long 
   493 ;; Auto vars:     Size  Location     Type
   494 ;;  quotient        4   10[COMRAM] long 
   495 ;;  sign            1    9[COMRAM] unsigned char 
   496 ;;  counter         1    8[COMRAM] unsigned char 
   497 ;; Return value:  Size  Location     Type
   498 ;;                  4    0[COMRAM] long 
   499 ;; Registers used:
   500 ;;		wreg, status,2, status,0
   501 ;; Tracked objects:
   502 ;;		On entry : 0/0
   503 ;;		On exit  : 0/0
   504 ;;		Unchanged: 0/0
   505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   506 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   507 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   509 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   510 ;;Total ram usage:       14 bytes
   511 ;; Hardware stack levels used:    1
   512 ;; This function calls:
   513 ;;		Nothing
   514 ;; This function is called by:
   515 ;;		_uart_init
   516 ;; This function uses a non-reentrant model
   517 ;;
   518                           
   519                           	psect	text3
   520  00FE02                     __ptext3:
   521                           	opt stack 0
   522  00FE02                     ___aldiv:
   523                           	opt stack 28
   524                           
   525                           ;incstack = 0
   526  00FE02  0E00               	movlw	0
   527  00FE04  6E0A               	movwf	___aldiv@sign,c
   528  00FE06  AE08               	btfss	___aldiv@divisor+3,7,c
   529  00FE08  D00A               	goto	l128
   530  00FE0A  1E08               	comf	___aldiv@divisor+3,f,c
   531  00FE0C  1E07               	comf	___aldiv@divisor+2,f,c
   532  00FE0E  1E06               	comf	___aldiv@divisor+1,f,c
   533  00FE10  6C05               	negf	___aldiv@divisor,c
   534  00FE12  0E00               	movlw	0
   535  00FE14  2206               	addwfc	___aldiv@divisor+1,f,c
   536  00FE16  2207               	addwfc	___aldiv@divisor+2,f,c
   537  00FE18  2208               	addwfc	___aldiv@divisor+3,f,c
   538  00FE1A  0E01               	movlw	1
   539  00FE1C  6E0A               	movwf	___aldiv@sign,c
   540  00FE1E                     l128:
   541  00FE1E  AE04               	btfss	___aldiv@dividend+3,7,c
   542  00FE20  D00A               	goto	l129
   543  00FE22  1E04               	comf	___aldiv@dividend+3,f,c
   544  00FE24  1E03               	comf	___aldiv@dividend+2,f,c
   545  00FE26  1E02               	comf	___aldiv@dividend+1,f,c
   546  00FE28  6C01               	negf	___aldiv@dividend,c
   547  00FE2A  0E00               	movlw	0
   548  00FE2C  2202               	addwfc	___aldiv@dividend+1,f,c
   549  00FE2E  2203               	addwfc	___aldiv@dividend+2,f,c
   550  00FE30  2204               	addwfc	___aldiv@dividend+3,f,c
   551  00FE32  0E01               	movlw	1
   552  00FE34  1A0A               	xorwf	___aldiv@sign,f,c
   553  00FE36                     l129:
   554  00FE36  0E00               	movlw	0
   555  00FE38  6E0B               	movwf	___aldiv@quotient,c
   556  00FE3A  0E00               	movlw	0
   557  00FE3C  6E0C               	movwf	___aldiv@quotient+1,c
   558  00FE3E  0E00               	movlw	0
   559  00FE40  6E0D               	movwf	___aldiv@quotient+2,c
   560  00FE42  0E00               	movlw	0
   561  00FE44  6E0E               	movwf	___aldiv@quotient+3,c
   562  00FE46  5005               	movf	___aldiv@divisor,w,c
   563  00FE48  1006               	iorwf	___aldiv@divisor+1,w,c
   564  00FE4A  1007               	iorwf	___aldiv@divisor+2,w,c
   565  00FE4C  1008               	iorwf	___aldiv@divisor+3,w,c
   566  00FE4E  B4D8               	btfsc	status,2,c
   567  00FE50  D02A               	goto	l136
   568  00FE52  0E01               	movlw	1
   569  00FE54  6E09               	movwf	___aldiv@counter,c
   570  00FE56  D006               	goto	l131
   571  00FE58  90D8               	bcf	status,0,c
   572  00FE5A  3605               	rlcf	___aldiv@divisor,f,c
   573  00FE5C  3606               	rlcf	___aldiv@divisor+1,f,c
   574  00FE5E  3607               	rlcf	___aldiv@divisor+2,f,c
   575  00FE60  3608               	rlcf	___aldiv@divisor+3,f,c
   576  00FE62  2A09               	incf	___aldiv@counter,f,c
   577  00FE64                     l131:
   578  00FE64  AE08               	btfss	___aldiv@divisor+3,7,c
   579  00FE66  D7F8               	goto	l132
   580  00FE68                     u190:
   581  00FE68  90D8               	bcf	status,0,c
   582  00FE6A  360B               	rlcf	___aldiv@quotient,f,c
   583  00FE6C  360C               	rlcf	___aldiv@quotient+1,f,c
   584  00FE6E  360D               	rlcf	___aldiv@quotient+2,f,c
   585  00FE70  360E               	rlcf	___aldiv@quotient+3,f,c
   586  00FE72  5005               	movf	___aldiv@divisor,w,c
   587  00FE74  5C01               	subwf	___aldiv@dividend,w,c
   588  00FE76  5006               	movf	___aldiv@divisor+1,w,c
   589  00FE78  5802               	subwfb	___aldiv@dividend+1,w,c
   590  00FE7A  5007               	movf	___aldiv@divisor+2,w,c
   591  00FE7C  5803               	subwfb	___aldiv@dividend+2,w,c
   592  00FE7E  5008               	movf	___aldiv@divisor+3,w,c
   593  00FE80  5804               	subwfb	___aldiv@dividend+3,w,c
   594  00FE82  A0D8               	btfss	status,0,c
   595  00FE84  D009               	goto	l135
   596  00FE86  5005               	movf	___aldiv@divisor,w,c
   597  00FE88  5E01               	subwf	___aldiv@dividend,f,c
   598  00FE8A  5006               	movf	___aldiv@divisor+1,w,c
   599  00FE8C  5A02               	subwfb	___aldiv@dividend+1,f,c
   600  00FE8E  5007               	movf	___aldiv@divisor+2,w,c
   601  00FE90  5A03               	subwfb	___aldiv@dividend+2,f,c
   602  00FE92  5008               	movf	___aldiv@divisor+3,w,c
   603  00FE94  5A04               	subwfb	___aldiv@dividend+3,f,c
   604  00FE96  800B               	bsf	___aldiv@quotient,0,c
   605  00FE98                     l135:
   606  00FE98  90D8               	bcf	status,0,c
   607  00FE9A  3208               	rrcf	___aldiv@divisor+3,f,c
   608  00FE9C  3207               	rrcf	___aldiv@divisor+2,f,c
   609  00FE9E  3206               	rrcf	___aldiv@divisor+1,f,c
   610  00FEA0  3205               	rrcf	___aldiv@divisor,f,c
   611  00FEA2  2E09               	decfsz	___aldiv@counter,f,c
   612  00FEA4  D7E1               	goto	u190
   613  00FEA6                     l136:
   614  00FEA6  500A               	movf	___aldiv@sign,w,c
   615  00FEA8  B4D8               	btfsc	status,2,c
   616  00FEAA  D008               	goto	l137
   617  00FEAC  1E0E               	comf	___aldiv@quotient+3,f,c
   618  00FEAE  1E0D               	comf	___aldiv@quotient+2,f,c
   619  00FEB0  1E0C               	comf	___aldiv@quotient+1,f,c
   620  00FEB2  6C0B               	negf	___aldiv@quotient,c
   621  00FEB4  0E00               	movlw	0
   622  00FEB6  220C               	addwfc	___aldiv@quotient+1,f,c
   623  00FEB8  220D               	addwfc	___aldiv@quotient+2,f,c
   624  00FEBA  220E               	addwfc	___aldiv@quotient+3,f,c
   625  00FEBC                     l137:
   626  00FEBC  C00B  F001         	movff	___aldiv@quotient,?___aldiv
   627  00FEC0  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
   628  00FEC4  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
   629  00FEC8  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
   630  00FECC  0012               	return	
   631  00FECE                     __end_of___aldiv:
   632                           	opt stack 0
   633                           wreg	equ	0xFE8
   634                           status	equ	0xFD8
   635                           
   636 ;; *************** function _port_init *****************
   637 ;; Defined at:
   638 ;;		line 150 in file "main.c"
   639 ;; Parameters:    Size  Location     Type
   640 ;;		None
   641 ;; Auto vars:     Size  Location     Type
   642 ;;		None
   643 ;; Return value:  Size  Location     Type
   644 ;;                  1    wreg      unsigned char 
   645 ;; Registers used:
   646 ;;		wreg, status,2
   647 ;; Tracked objects:
   648 ;;		On entry : 0/0
   649 ;;		On exit  : 0/0
   650 ;;		Unchanged: 0/0
   651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   655 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   656 ;;Total ram usage:        0 bytes
   657 ;; Hardware stack levels used:    1
   658 ;; This function calls:
   659 ;;		Nothing
   660 ;; This function is called by:
   661 ;;		_system_init
   662 ;; This function uses a non-reentrant model
   663 ;;
   664                           
   665                           	psect	text4
   666  00FD76                     __ptext4:
   667                           	opt stack 0
   668  00FD76                     _port_init:
   669                           	opt stack 29
   670                           
   671                           ;main.c: 152: TRISD = 0;
   672                           
   673                           ;incstack = 0
   674  00FD76  0E00               	movlw	0
   675  00FD78  6E95               	movwf	3989,c	;volatile
   676                           
   677                           ;main.c: 155: PORTD = 0;
   678  00FD7A  0E00               	movlw	0
   679  00FD7C  6E83               	movwf	3971,c	;volatile
   680                           
   681                           ;main.c: 159: return 1;
   682  00FD7E  0E01               	movlw	1
   683  00FD80  0012               	return	
   684  00FD82                     __end_of_port_init:
   685                           	opt stack 0
   686                           wreg	equ	0xFE8
   687                           status	equ	0xFD8
   688                           
   689 ;; *************** function _loop *****************
   690 ;; Defined at:
   691 ;;		line 212 in file "main.c"
   692 ;; Parameters:    Size  Location     Type
   693 ;;		None
   694 ;; Auto vars:     Size  Location     Type
   695 ;;  b               1    1[COMRAM] unsigned char 
   696 ;; Return value:  Size  Location     Type
   697 ;;                  1    wreg      void 
   698 ;; Registers used:
   699 ;;		wreg, status,2, cstack
   700 ;; Tracked objects:
   701 ;;		On entry : 0/0
   702 ;;		On exit  : 0/0
   703 ;;		Unchanged: 0/0
   704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   706 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   708 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   709 ;;Total ram usage:        1 bytes
   710 ;; Hardware stack levels used:    1
   711 ;; Hardware stack levels required when called:    1
   712 ;; This function calls:
   713 ;;		_blink
   714 ;;		_uart_data_ready
   715 ;;		_uart_read
   716 ;; This function is called by:
   717 ;;		_main
   718 ;; This function uses a non-reentrant model
   719 ;;
   720                           
   721                           	psect	text5
   722  00FD96                     __ptext5:
   723                           	opt stack 0
   724  00FD96                     _loop:
   725                           	opt stack 29
   726                           
   727                           ;main.c: 213: char b = 0;
   728                           
   729                           ;incstack = 0
   730  00FD96  0E00               	movlw	0
   731  00FD98  6E02               	movwf	loop@b,c
   732                           
   733                           ;main.c: 214: if (uart_data_ready()) {
   734  00FD9A  ECB3  F07E         	call	_uart_data_ready	;wreg free
   735  00FD9E  0900               	iorlw	0
   736  00FDA0  B4D8               	btfsc	status,2,c
   737  00FDA2  0012               	return	
   738                           
   739                           ;main.c: 215: b = uart_read();
   740  00FDA4  ECB7  F07E         	call	_uart_read	;wreg free
   741  00FDA8  6E02               	movwf	loop@b,c
   742                           
   743                           ;main.c: 221: blink();
   744  00FDAA  ECC1  F07E         	call	_blink	;wreg free
   745  00FDAE  0012               	return	
   746  00FDB0                     __end_of_loop:
   747                           	opt stack 0
   748                           wreg	equ	0xFE8
   749                           status	equ	0xFD8
   750                           
   751 ;; *************** function _uart_read *****************
   752 ;; Defined at:
   753 ;;		line 134 in file "main.c"
   754 ;; Parameters:    Size  Location     Type
   755 ;;		None
   756 ;; Auto vars:     Size  Location     Type
   757 ;;		None
   758 ;; Return value:  Size  Location     Type
   759 ;;                  1    wreg      unsigned char 
   760 ;; Registers used:
   761 ;;		wreg, status,2
   762 ;; Tracked objects:
   763 ;;		On entry : 0/0
   764 ;;		On exit  : 0/0
   765 ;;		Unchanged: 0/0
   766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   770 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   771 ;;Total ram usage:        0 bytes
   772 ;; Hardware stack levels used:    1
   773 ;; This function calls:
   774 ;;		Nothing
   775 ;; This function is called by:
   776 ;;		_loop
   777 ;; This function uses a non-reentrant model
   778 ;;
   779                           
   780                           	psect	text6
   781  00FD6E                     __ptext6:
   782                           	opt stack 0
   783  00FD6E                     _uart_read:
   784                           	opt stack 29
   785                           
   786                           ;main.c: 135: while (!RCIF);
   787                           
   788                           ;incstack = 0
   789  00FD6E  AA9E               	btfss	3998,5,c	;volatile
   790  00FD70  D7FE               	goto	_uart_read
   791                           
   792                           ;main.c: 136: return RCREG;
   793  00FD72  50AE               	movf	4014,w,c	;volatile
   794  00FD74  0012               	return	
   795  00FD76                     __end_of_uart_read:
   796                           	opt stack 0
   797                           wreg	equ	0xFE8
   798                           status	equ	0xFD8
   799                           
   800 ;; *************** function _uart_data_ready *****************
   801 ;; Defined at:
   802 ;;		line 109 in file "main.c"
   803 ;; Parameters:    Size  Location     Type
   804 ;;		None
   805 ;; Auto vars:     Size  Location     Type
   806 ;;		None
   807 ;; Return value:  Size  Location     Type
   808 ;;                  1    wreg      unsigned char 
   809 ;; Registers used:
   810 ;;		wreg
   811 ;; Tracked objects:
   812 ;;		On entry : 0/0
   813 ;;		On exit  : 0/0
   814 ;;		Unchanged: 0/0
   815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   819 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   820 ;;Total ram usage:        0 bytes
   821 ;; Hardware stack levels used:    1
   822 ;; This function calls:
   823 ;;		Nothing
   824 ;; This function is called by:
   825 ;;		_loop
   826 ;; This function uses a non-reentrant model
   827 ;;
   828                           
   829                           	psect	text7
   830  00FD66                     __ptext7:
   831                           	opt stack 0
   832  00FD66                     _uart_data_ready:
   833                           	opt stack 29
   834                           
   835                           ;main.c: 110: return RCIF;
   836                           
   837                           ;incstack = 0
   838  00FD66  0E00               	movlw	0
   839  00FD68  BA9E               	btfsc	3998,5,c	;volatile
   840  00FD6A  0E01               	movlw	1
   841  00FD6C  0012               	return	
   842  00FD6E                     __end_of_uart_data_ready:
   843                           	opt stack 0
   844                           wreg	equ	0xFE8
   845                           status	equ	0xFD8
   846                           
   847 ;; *************** function _blink *****************
   848 ;; Defined at:
   849 ;;		line 187 in file "main.c"
   850 ;; Parameters:    Size  Location     Type
   851 ;;		None
   852 ;; Auto vars:     Size  Location     Type
   853 ;;		None
   854 ;; Return value:  Size  Location     Type
   855 ;;                  1    wreg      void 
   856 ;; Registers used:
   857 ;;		wreg
   858 ;; Tracked objects:
   859 ;;		On entry : 0/0
   860 ;;		On exit  : 0/0
   861 ;;		Unchanged: 0/0
   862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   865 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   866 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   867 ;;Total ram usage:        1 bytes
   868 ;; Hardware stack levels used:    1
   869 ;; This function calls:
   870 ;;		Nothing
   871 ;; This function is called by:
   872 ;;		_loop
   873 ;;		_error
   874 ;; This function uses a non-reentrant model
   875 ;;
   876                           
   877                           	psect	text8
   878  00FD82                     __ptext8:
   879                           	opt stack 0
   880  00FD82                     _blink:
   881                           	opt stack 29
   882                           
   883                           ;main.c: 188: PORTDbits.RD1 = 1;
   884                           
   885                           ;incstack = 0
   886  00FD82  8283               	bsf	3971,1,c	;volatile
   887                           
   888                           ;main.c: 189: _delay((unsigned long)((1)*(8000000/4000.0)));
   889  00FD84  0E03               	movlw	3
   890  00FD86  6E01               	movwf	??_blink& (0+255),c
   891  00FD88  0E98               	movlw	152
   892  00FD8A                     u297:
   893  00FD8A  2EE8               	decfsz	wreg,f,c
   894  00FD8C  D7FE               	bra	u297
   895  00FD8E  2E01               	decfsz	??_blink& (0+255),f,c
   896  00FD90  D7FC               	bra	u297
   897                           
   898                           ;main.c: 190: PORTDbits.RD1 = 0;
   899  00FD92  9283               	bcf	3971,1,c	;volatile
   900  00FD94  0012               	return		;funcret
   901  00FD96                     __end_of_blink:
   902                           	opt stack 0
   903  0000                     wreg	equ	0xFE8
   904                           status	equ	0xFD8
   905                           wreg	equ	0xFE8
   906                           status	equ	0xFD8
   907                           
   908                           	psect	rparam
   909  0000                     wreg	equ	0xFE8
   910                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     37      37
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_system_init
    _system_init->_uart_init
    _uart_init->___aldiv
    _loop->_blink

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    1016
                                             33 COMRAM     4     4      0
                               _loop
                        _system_init
 ---------------------------------------------------------------------------------
 (1) _system_init                                          5     1      4     993
                                             28 COMRAM     5     1      4
                          _port_init
                          _uart_init
 ---------------------------------------------------------------------------------
 (2) _uart_init                                           14    10      4     836
                                             14 COMRAM    14    10      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     604
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (2) _port_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _loop                                                 1     1      0       0
                                              1 COMRAM     1     1      0
                              _blink
                    _uart_data_ready
                          _uart_read
 ---------------------------------------------------------------------------------
 (2) _uart_read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _uart_data_ready                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _blink                                                1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _loop
     _blink
     _uart_data_ready
     _uart_read
   _system_init
     _port_init
     _uart_init
       ___aldiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA             400      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F     25      25       1       29.1%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
ABS                  0      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BIGRAM             F7F      0       0      37        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Jan 15 12:03:07 2018

       ??_uart_data_ready 0001                        l31 FFE2                        l32 FFFC  
                      l70 FDFC               __CFG_OSC$HS 000000       __end_of_system_init FDD8  
                     l131 FE64                       l132 FE58                       l135 FE98  
                     l136 FEA6                       l128 FE1E                       l137 FEBC  
                     l129 FE36                       u225 FEE0                       u235 FF2A  
                     u190 FE68                       u255 FF6C                       u265 FFB6  
                     u297 FD8A                       wreg 000FE8              __CFG_LVP$OFF 000000  
            __CFG_WDT$OFF 000000                      _BRGH 007D62                      _CREN 007D5C  
                    _RCIF 007CF5                      _SPEN 007D5F                      _TXEN 007D65  
                    _SYNC 007D64                      _main FDD8                      _loop FD96  
                    start 0000              ___param_bank 000000           __end_of___aldiv FECE  
                   ?_main 0001                     ?_loop 0001            __CFG_DEBUG$OFF 000000  
                   _RCREG 000FAE                     _SPBRG 000FAF                     _PORTD 000F83  
                   _TRISD 000F95             __CFG_PWRT$OFF 000000                     _blink FD82  
          __CFG_BOREN$OFF 000000                     loop@b 0002                     status 000FD8  
          __CFG_MCLRE$OFF 000000           __initialization FD60               _system_init FDB0  
            __end_of_main FE02              __end_of_loop FDB0                    ??_main 0022  
                  ??_loop 0002             __activetblptr 000000                    ?_blink 0001  
                  _TRISC6 007CA6                    _TRISC7 007CA7                 ??___aldiv 0009  
         _uart_data_ready FD66                __accesstop 0080   __end_of__initialization FD60  
         __CFG_PBADEN$OFF 000000             ___rparam_used 000001            __pcstackCOMRAM 0001  
           __end_of_blink FD96       system_init@baudrate 001D                   ??_blink 0001  
      __size_of_uart_init 0132        __size_of_uart_read 0008        __size_of_port_init 000C  
 __end_of_uart_data_ready FD6E                   __Hparam 0000                   __Lparam 0000  
            ?_system_init 001D                   ___aldiv FE02                   __pcinit FD60  
                 __ramtop 1000                   __ptext0 FDD8                   __ptext1 FDB0  
                 __ptext2 FECE                   __ptext3 FE02                   __ptext4 FD76  
                 __ptext5 FD96                   __ptext6 FD6E                   __ptext7 FD66  
                 __ptext8 FD82          ___aldiv@dividend 0001      end_of_initialization FD60  
       __end_of_uart_init 0000         __end_of_uart_read FD76         __end_of_port_init FD82  
        ___aldiv@quotient 000B                 _PORTDbits 000F83        main@MIDI_BAUD_RATE 0022  
        ?_uart_data_ready 0001       start_initialization FD60      __size_of_system_init 0028  
                ?___aldiv 0001            __size_of_blink 0014           ___aldiv@divisor 0005  
         ___aldiv@counter 0009                 _uart_init FECE                 _uart_read FD6E  
              uart_init@x 001B                 _port_init FD76                  __Hrparam 0000  
                __Lrparam 0000                ?_uart_init 000F                ?_uart_read 0001  
        __size_of___aldiv 00CC                ?_port_init 0001         system_init@status 0021  
           __size_of_main 002A             __size_of_loop 001A  __size_of_uart_data_ready 0008  
       uart_init@baudrate 000F             ??_system_init 0021               ??_uart_init 0013  
             ??_uart_read 0001               ??_port_init 0001              ___aldiv@sign 000A  
